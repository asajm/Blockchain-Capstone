// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
let Verifier = artifacts.require('Verifier');
let proof = require('../../zokrates/code/square/proof').proof
let input = require('../../zokrates/code/square/proof').input

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps


// Test verification with incorrect proof


contract('Verifier', accounts => {
    const owner = accounts[0];

    describe("The test cases in 'TestSquareVerifier.js'", function () {
        beforeEach(async function () {
            this.contract = await Verifier.new({from: owner});
        })

        it('Test verification with correct proof', async function () {
            let result = await this.contract.verifyTx.call(
                proof.A,
                proof.A_p,
                proof.B,
                proof.B_p,
                proof.C,
                proof.C_p,
                proof.H,
                proof.K,
                input,
                {from: owner})
            assert.equal(result, true, 'the verification should be correct')
        })

        it('Test verification with incorrect proof', async function () {
            let result = await this.contract.verifyTx.call(
                proof.A,
                proof.A_p,
                proof.B,
                proof.B_p,
                proof.C,
                proof.C_p,
                proof.H,
                proof.K,
                [2,4],
                {from: owner})
            assert.equal(result, false, 'the verification should not be correct')
        })
    });
})